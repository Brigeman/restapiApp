#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
"""

import subprocess
import sys
import os


def run_coverage():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∏ –≤—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º...")
    print("=" * 50)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è coverage
    env = os.environ.copy()
    env['COVERAGE_FILE'] = '.coverage'
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å coverage
        result = subprocess.run([
            'python', '-m', 'pytest', 
            'test_*.py', 
            '--cov=.', 
            '--cov-report=term-missing',
            '--cov-report=html:htmlcov',
            '--cov-report=xml',
            '-v'
        ], env=env, capture_output=True, text=True)
        
        print(result.stdout)
        
        if result.stderr:
            print("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
            print(result.stderr)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if result.returncode == 0:
            print("\n‚úÖ –¢–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print(f"\n‚ùå –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: {result.returncode})")
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è:")
        subprocess.run(['python', '-m', 'coverage', 'report', '--show-missing'])
        
        print("\nüåê HTML –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–ø–∫–µ htmlcov/")
        print("üìÑ –û—Ç–∫—Ä–æ–π—Ç–µ htmlcov/index.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ coverage: {e}")
        return False
    
    return True


def show_coverage_summary():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∫—Ä—ã—Ç–∏—è"""
    print("\nüìà –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è:")
    print("-" * 30)
    
    try:
        result = subprocess.run([
            'python', '-m', 'coverage', 'report', '--show-missing'
        ], capture_output=True, text=True)
        
        print(result.stdout)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


if __name__ == "__main__":
    print("üöÄ Coverage Runner –¥–ª—è REST API")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ coverage
    try:
        import coverage
        print("‚úÖ coverage —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print("‚ùå coverage –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install coverage")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
    success = run_coverage()
    
    if success:
        show_coverage_summary()
        print("\nüéâ Coverage –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    else:
        print("\nüí• Coverage –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1) 